Script(s,functions,main) ::= <<
#include <stdio.h>
#include "wich.h"

<functions;separator="\n">
<main>
>>

Func(f,returnType,args,localVars,body):: <<
<returnType> <f.funcName>(<if(args)>, <args ;separator=","><endif>)
{
    <body;separator="\n">
    <if(localVars)><localVars:{var|((heap_object *)<var>)->refs--;};separator="\n">
}
>>

MainMethod(main,stats,vars) ::<<
int main(int argc, char *argv[])
{
    <stats;separator="\n">
    <if(vars)><vars:{v|((heap_object *)<v>)->refs--;};separator="\n">
}
>>

AssignStat(a,right)::=<<
COPY_ON_WRITE(<a.varName>);
<a.varName> = <right>;
>>

CallStat(c,callExpr) ::=<<
<callExpr>;
>>

ElementAssignStat(e,index,rExpr) ::<<
COPY_ON_WRITE(<e.eName>);
<e.eName>[<index>-1] = <rExpr>;
>>

IfStat(i,condition,stat,elseStat) ::= <<
if(<condition>) <stat>
<if(elseStat)>else <elseStat><endif>
>>

WhileStat(w,condition, stat) ::= <<
while(<condition>){
    <stat;separator="\n">
}
>>

ReturnStat(r,rExpr)  ::= "return <rExpr>;"

VarDefStat(v,type,expr) ::= <<
<type> <v.name> = <expr>;
((heap_object *)v.name)->refs = 1;
>>

BlockStat(b,stats) ::= <<
<stats;separator="\n">
>>

AtomExpr(a,vector) ::= <<
<if(vector)>[<vector ;separator=",">]<else><a.content><endif>
>>

CallExpr(call,exprs,printExpr) ::= <<
<if(printExpr)>print() <else><call.callName> (<exprs ;separator=",">)<endif>
>>

IndexExpr(i,expr) ::=<<
<i.varName>[<expr>-1]
>>

NegateExpr(n,nExpr) ::= "- <nExpr>"

NotExpr(ne,notExpr) ::= "! <notExpr>"

OpExpr(o,lExpr,rExpr) ::= <<
<lExpr> <o.operator> <rExpr>
>>

ParensExpr(p,expression) ::= "(<expression>)"

ArgDef(arg,type) ::= "<type> <arg.name>"

PType(t) ::= "<t.typeName>"
